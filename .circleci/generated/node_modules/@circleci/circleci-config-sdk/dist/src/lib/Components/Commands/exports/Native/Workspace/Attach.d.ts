import { GenerableType } from '../../../../../Config/exports/Mapping';
import { StringParameter } from '../../../../Parameters/types';
import { CommandParameters, CommandShape } from '../../../types/Command.types';
import { Command } from '../../Command';
/**
 * Special step used to attach the workflowâ€™s workspace to the current container. The full contents of the workspace are downloaded and copied into the directory the workspace is being attached at.
 * @see {@link https://circleci.com/docs/configuration-reference#attachworkspace}
 */
export declare class Attach implements Command {
    parameters: AttachParameters;
    constructor(parameters: AttachParameters);
    /**
     * Generate Save.cache Command shape.
     * @returns The generated JSON for the Save.cache Commands.
     */
    generate(): AttachCommandShape;
    get name(): StringParameter;
    get generableType(): GenerableType;
}
/**
 * Generated Shape of the Attach command.
 */
interface AttachCommandShape extends CommandShape {
    attach_workspace: AttachParameters;
}
/**
 * Command parameters for the Attach command
 */
export interface AttachParameters extends CommandParameters {
    /**
     * Directory to attach the workspace to.
     */
    at: StringParameter;
}
export {};
//# sourceMappingURL=Attach.d.ts.map